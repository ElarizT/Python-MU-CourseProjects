{% extends "layout.html" %}

{% block title %}Login - LightYearAI{% endblock %}

{% block content %}
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-body p-5">
                    <h2 class="text-center mb-4">Sign In</h2>
                    
                    {% with messages = get_flashed_messages(with_categories=true) %}
                        {% if messages %}
                            {% for category, message in messages %}
                                <div class="alert alert-{{ category }} alert-dismissible fade show" role="alert">
                                    {{ message }}
                                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                                </div>
                            {% endfor %}
                        {% endif %}
                    {% endwith %}
                    
                    <form id="login-form" class="mb-4">
                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <input type="email" class="form-control" id="email" required>
                        </div>
                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <input type="password" class="form-control" id="password" required>
                        </div>
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary btn-lg" id="login-button">Sign In</button>
                        </div>
                    </form>
                    
                    <div class="text-center mb-3">
                        <a href="{{ url_for('forgot_password') }}" class="text-decoration-none">Forgot Password?</a>
                    </div>
                    
                    <div class="d-grid mb-3">
                        <button id="google-signin" class="btn btn-outline-dark btn-lg">
                            <img src="/static/images/google_icon.svg" alt="Google" width="20" height="20" class="me-2">
                            Sign in with Google
                        </button>
                    </div>
                    
                    <div class="text-center mt-4">
                        <p>Don't have an account? <a href="{{ url_for('signup') }}" class="text-decoration-none">Create an Account</a></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Firebase App (the core Firebase SDK) -->
<script src="https://www.gstatic.com/firebasejs/9.21.0/firebase-app-compat.js"></script>
<!-- Add Firebase Auth -->
<script src="https://www.gstatic.com/firebasejs/9.21.0/firebase-auth-compat.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Diagnose any logout state on page load
    const loggedOutFlag = localStorage.getItem('explicitly_logged_out');
    console.log('Login page loaded, explicitly_logged_out flag state:', loggedOutFlag);
    
    // Check session existence
    const hasSession = document.cookie.indexOf('session=') >= 0;
    console.log('Session cookie present:', hasSession);
    
    // Clear logout flag if we're on login page (user explicitly trying to login)
    if (loggedOutFlag === 'true') {
        console.log('Automatically clearing explicitly_logged_out flag on login page load');
        localStorage.removeItem('explicitly_logged_out');
        
        // If user was previously explicitly logged out, then logs in again,
        // make sure to clear cached Firebase auth data
        localStorage.removeItem('firebase:authUser');
        localStorage.removeItem('firebase:previous-user');
        
        // Also clear any Firebase auth data with dynamic key names
        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (key && key.startsWith('firebase:')) {
                localStorage.removeItem(key);
            }
        }
        
        console.log('Cleared Firebase auth data from localStorage');
    }
    
    // If explicitly logged out, clear Firebase auth cache
    if (window.authUtils && window.authUtils.clearFirebaseAuthCache) {
        if (localStorage.getItem('explicitly_logged_out') === 'true') {
            console.log('Detected previous logout, clearing Firebase auth cache');
            window.authUtils.clearFirebaseAuthCache();
        }
    }
      // Firebase configuration
    const firebaseConfig = {
        apiKey: "{{ firebase_api_key }}",
        authDomain: "{{ firebase_auth_domain }}",
        projectId: "{{ firebase_project_id }}",
        storageBucket: "{{ firebase_storage_bucket }}",
        messagingSenderId: "{{ firebase_messaging_sender_id }}",
        appId: "{{ firebase_app_id }}"
    };
      // Initialize Firebase
    firebase.initializeApp(firebaseConfig);
    
    // Initialize our authentication manager
    if (window.FirebaseAuthManager) {
        window.FirebaseAuthManager.init(firebase, function(user) {
            // Hide loading if shown
            if (window.LoadingManager) {
                window.LoadingManager.hideLoading();
            }
            
            // If user is already authenticated, redirect to home or next page
            if (user) {
                console.log('User already authenticated, redirecting');
                redirectAfterLogin();
            }
        });
    } else {
        console.warn('FirebaseAuthManager not available');
        
        // Fallback initialization for backwards compatibility
        // If user was previously logged out, ensure we're using session-only persistence
        if (loggedOutFlag === 'true') {
            firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION)
                .catch(err => console.error('Error setting auth persistence:', err));
        }
        
        // Clear any existing Firebase auth state if explicit logout occurred
        firebase.auth().onAuthStateChanged(function(user) {
            if (user && loggedOutFlag === 'true') {
                console.log('Auto login detected after explicit logout. Signing out again.');
                firebase.auth().signOut().catch(e => console.error('Error in forced signOut:', e));
            }
        });
    }
    
    // Helper function for redirection after login
    function redirectAfterLogin() {
        // Check if there's a 'next' parameter in the URL to redirect to
        const urlParams = new URLSearchParams(window.location.search);
        const nextUrl = urlParams.get('next');
        if (nextUrl) {
            window.location.href = nextUrl;
        } else {
            window.location.href = '/';
        }
    }
    
    // Setup Google sign-in
    const googleButton = document.getElementById('google-signin');
    googleButton.addEventListener('click', function() {
        // Clear explicit logout flag since user is explicitly trying to login
        console.log('Clearing explicitly_logged_out flag for Google login');
        localStorage.removeItem('explicitly_logged_out');
        
        // Clear any existing Firebase auth data to prevent auto-login
        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (key && key.startsWith('firebase:')) {
                localStorage.removeItem(key);
                console.log('Cleared Firebase storage item:', key);
            }
        }
        
        const provider = new firebase.auth.GoogleAuthProvider();
        // Always force account selection to prevent auto-login
        provider.setCustomParameters({
            prompt: 'select_account'
        });
        
        // Make sure we're using default persistence after user initiates login
        firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL)
            .then(() => {
                return firebase.auth().signInWithPopup(provider);
            })
            .then((result) => {
                // Get the ID token
                return result.user.getIdToken();
            })
            .then((idToken) => {
                // Send the token to the server
                return fetch('/api/auth/google', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ idToken: idToken })
                });
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    redirectAfterLogin();
                } else {
                    throw new Error(data.error || 'Failed to authenticate');
                }
            })
            .catch((error) => {
                console.error('Error during Google sign-in:', error);
                alert('Failed to sign in with Google: ' + (error.message || 'Unknown error'));
            });
    });
    
    // Setup Email/Password login
    const loginForm = document.getElementById('login-form');
    loginForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const email = document.getElementById('email').value;
        const password = document.getElementById('password').value;
        const loginButton = document.getElementById('login-button');
        
        // Clear explicit logout flag since user is explicitly trying to login
        console.log('Clearing explicitly_logged_out flag for email login');
        localStorage.removeItem('explicitly_logged_out');
        
        // Disable button and show loading state
        loginButton.disabled = true;
        loginButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Signing in...';
        
        // Make sure we're using default persistence after user initiates login
        firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL)
            .then(() => {
                return firebase.auth().signInWithEmailAndPassword(email, password);
            })
            .then((userCredential) => {
                return userCredential.user.getIdToken();
            })
            .then((idToken) => {
                return fetch('/api/auth/email', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ idToken: idToken })
                });
            })            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // After successful login, set persistence back to LOCAL for this session
                    firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL)
                        .then(() => {
                            console.log('Set Firebase persistence to LOCAL after successful login');
                            redirectAfterLogin();
                        })
                        .catch(err => {
                            console.error('Error setting persistence:', err);
                            redirectAfterLogin();
                        });
                } else {
                    throw new Error(data.error || 'Failed to authenticate');
                }
            })
            .catch((error) => {
                console.error('Error during email/password login:', error);
                let errorMessage = 'Invalid email or password';
                
                if (error.code === 'auth/user-not-found' || error.code === 'auth/wrong-password') {
                    errorMessage = 'Invalid email or password';
                } else if (error.code === 'auth/too-many-requests') {
                    errorMessage = 'Too many failed login attempts. Please try again later.';
                } else if (error.code === 'auth/user-disabled') {
                    errorMessage = 'This account has been disabled. Please contact support.';
                } else {
                    errorMessage = error.message || 'Failed to sign in';
                }
                
                // Show error message
                const alertHTML = `
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        ${errorMessage}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                `;
                loginForm.insertAdjacentHTML('beforebegin', alertHTML);
                
                // Re-enable button
                loginButton.disabled = false;
                loginButton.innerHTML = 'Sign In';
            });
    });
});
</script>
{% endblock %}
