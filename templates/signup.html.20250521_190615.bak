{% extends "layout.html" %}

{% block title %}Sign Up - LightYearAI{% endblock %}

{% block content %}
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-body p-5">
                    <h2 class="text-center mb-4">Create Account</h2>
                    
                    {% with messages = get_flashed_messages(with_categories=true) %}
                        {% if messages %}
                            {% for category, message in messages %}
                                <div class="alert alert-{{ category }} alert-dismissible fade show" role="alert">
                                    {{ message }}
                                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                                </div>
                            {% endfor %}
                        {% endif %}
                    {% endwith %}
                    
                    <form id="signup-form" class="mb-4">
                        <div class="mb-3">
                            <label for="name" class="form-label">Full Name</label>
                            <input type="text" class="form-control" id="name" required>
                        </div>
                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <input type="email" class="form-control" id="email" required>
                        </div>
                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <input type="password" class="form-control" id="password" required>
                            <div id="passwordHelp" class="form-text">Password must be at least 8 characters long</div>
                        </div>
                        <div class="mb-3">
                            <label for="confirm-password" class="form-label">Confirm Password</label>
                            <input type="password" class="form-control" id="confirm-password" required>
                        </div>
                        
                        <div class="mb-3 form-check">
                            <input type="checkbox" class="form-check-input" id="terms-check" required>
                            <label class="form-check-label" for="terms-check">I agree to the <a href="/terms" target="_blank">Terms of Service</a> and <a href="/privacy" target="_blank">Privacy Policy</a></label>
                        </div>
                        
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary btn-lg" id="signup-button">Create Account</button>
                        </div>
                    </form>
                    
                    <div class="text-center mb-3">
                        <p>Or sign up with:</p>
                    </div>
                    
                    <div class="d-grid mb-3">
                        <button id="google-signup" class="btn btn-outline-dark btn-lg">
                            <img src="/static/images/google_icon.svg" alt="Google" width="20" height="20" class="me-2">
                            Sign up with Google
                        </button>
                    </div>
                    
                    <div class="text-center mt-4">
                        <p>Already have an account? <a href="{{ url_for('login') }}" class="text-decoration-none">Sign In</a></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Firebase App (the core Firebase SDK) -->
<script src="https://www.gstatic.com/firebasejs/9.21.0/firebase-app-compat.js"></script>
<!-- Add Firebase Auth -->
<script src="https://www.gstatic.com/firebasejs/9.21.0/firebase-auth-compat.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Diagnose any logout state on page load
    const loggedOutFlag = localStorage.getItem('explicitly_logged_out');
    console.log('Signup page loaded, explicitly_logged_out flag state:', loggedOutFlag);
    
    // Check session existence
    const hasSession = document.cookie.indexOf('session=') >= 0;
    console.log('Session cookie present:', hasSession);
    
    // Clear logout flag if we're on signup page (user explicitly trying to register)
    if (loggedOutFlag === 'true') {
        console.log('Automatically clearing explicitly_logged_out flag on signup page load');
        localStorage.removeItem('explicitly_logged_out');
        
        // If user was previously explicitly logged out, then tries to sign up,
        // make sure to clear cached Firebase auth data
        localStorage.removeItem('firebase:authUser');
        localStorage.removeItem('firebase:previous-user');
        
        // Also clear any Firebase auth data with dynamic key names
        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (key && key.startsWith('firebase:')) {
                localStorage.removeItem(key);
            }
        }
        
        console.log('Cleared Firebase auth data from localStorage');
    }
      // Firebase configuration
    const firebaseConfig = {
        apiKey: "{{ firebase_api_key }}",
        authDomain: "{{ firebase_auth_domain }}",
        projectId: "{{ firebase_project_id }}",
        storageBucket: "{{ firebase_storage_bucket }}",
        messagingSenderId: "{{ firebase_messaging_sender_id }}",
        appId: "{{ firebase_app_id }}"
    };
      // Initialize Firebase
    firebase.initializeApp(firebaseConfig);
    
    // Setup Google sign-up
    const googleButton = document.getElementById('google-signup');
    googleButton.addEventListener('click', function() {
        // Clear explicit logout flag since user is explicitly trying to sign up
        console.log('Clearing explicitly_logged_out flag for Google signup');
        localStorage.removeItem('explicitly_logged_out');
        
        const provider = new firebase.auth.GoogleAuthProvider();
        provider.setCustomParameters({
            prompt: 'select_account'
        });
        
        firebase.auth().signInWithPopup(provider)
            .then((result) => {
                // Get the ID token
                return result.user.getIdToken();
            })
            .then((idToken) => {
                // Send the token to the server
                const referralCode = new URLSearchParams(window.location.search).get('ref');
                return fetch('/api/auth/google', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ 
                        idToken: idToken,
                        referralCode: referralCode
                    })
                });
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    window.location.href = '/';
                } else {
                    throw new Error(data.error || 'Failed to authenticate');
                }
            })
            .catch((error) => {
                console.error('Error during Google sign-up:', error);
                alert('Failed to sign up with Google: ' + (error.message || 'Unknown error'));
            });
    });
    
    // Password validation
    const passwordInput = document.getElementById('password');
    const confirmPasswordInput = document.getElementById('confirm-password');
    
    function validatePassword() {
        if (passwordInput.value.length < 8) {
            passwordInput.setCustomValidity('Password must be at least 8 characters long');
        } else {
            passwordInput.setCustomValidity('');
        }
    }
    
    function validateConfirmPassword() {
        if (passwordInput.value !== confirmPasswordInput.value) {
            confirmPasswordInput.setCustomValidity('Passwords do not match');
        } else {
            confirmPasswordInput.setCustomValidity('');
        }
    }
    
    passwordInput.addEventListener('input', validatePassword);
    confirmPasswordInput.addEventListener('input', validateConfirmPassword);
    
    // Setup Email/Password signup
    const signupForm = document.getElementById('signup-form');
    signupForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const name = document.getElementById('name').value;
        const email = document.getElementById('email').value;
        const password = document.getElementById('password').value;
        const confirmPassword = document.getElementById('confirm-password').value;
        const signupButton = document.getElementById('signup-button');
        
        // Validate passwords
        if (password !== confirmPassword) {
            const alertHTML = `
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    Passwords do not match.
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            `;
            signupForm.insertAdjacentHTML('beforebegin', alertHTML);
            return;
        }
        
        if (password.length < 8) {
            const alertHTML = `
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    Password must be at least 8 characters long.
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            `;
            signupForm.insertAdjacentHTML('beforebegin', alertHTML);
            return;
        }
          // Disable button and show loading state
        signupButton.disabled = true;
        signupButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Creating account...';
        
        // Clear explicit logout flag since user is explicitly trying to sign up
        localStorage.removeItem('explicitly_logged_out');
        
        // Create user with email and password
        firebase.auth().createUserWithEmailAndPassword(email, password)
            .then((userCredential) => {
                // Update user profile
                return userCredential.user.updateProfile({
                    displayName: name
                }).then(() => {
                    return userCredential.user.getIdToken();
                });
            })
            .then((idToken) => {
                // Send verification email
                return firebase.auth().currentUser.sendEmailVerification()
                    .then(() => idToken);
            })
            .then((idToken) => {
                // Send the token to the server to complete registration
                const referralCode = new URLSearchParams(window.location.search).get('ref');
                return fetch('/api/auth/signup', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ 
                        idToken: idToken,
                        name: name,
                        referralCode: referralCode
                    })
                });
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Display verification message
                    signupForm.innerHTML = `
                        <div class="alert alert-success" role="alert">
                            <h4 class="alert-heading">Account Created!</h4>
                            <p>We've sent a verification email to <strong>${email}</strong>. Please check your inbox and verify your email address to complete registration.</p>
                            <hr>
                            <p class="mb-0">Once verified, you can <a href="{{ url_for('login') }}">sign in</a> to your account.</p>
                        </div>
                    `;
                } else {
                    throw new Error(data.error || 'Failed to create account');
                }
            })
            .catch((error) => {
                console.error('Error during email/password signup:', error);
                let errorMessage = 'Failed to create account';
                
                if (error.code === 'auth/email-already-in-use') {
                    errorMessage = 'This email address is already in use';
                } else if (error.code === 'auth/invalid-email') {
                    errorMessage = 'Invalid email address';
                } else if (error.code === 'auth/weak-password') {
                    errorMessage = 'Password is too weak';
                } else {
                    errorMessage = error.message || 'Failed to create account';
                }
                
                // Show error message
                const alertHTML = `
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        ${errorMessage}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                `;
                signupForm.insertAdjacentHTML('beforebegin', alertHTML);
                
                // Re-enable button
                signupButton.disabled = false;
                signupButton.innerHTML = 'Create Account';
            });
    });
});
</script>
{% endblock %}
